CCS PCM C Compiler, Version 5.101, 43599               20-Apr-22 17:10

               Filename:   C:\Users\Admin\Documents\Micro\Timer\Timer.lst

               ROM used:   204 words (2%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           10 (3%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   077
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
*
0049:  MOVF   24,W
004A:  CLRF   78
004B:  SUBWF  23,W
004C:  BTFSC  03.0
004D:  GOTO   051
004E:  MOVF   23,W
004F:  MOVWF  77
0050:  GOTO   05D
0051:  CLRF   77
0052:  MOVLW  08
0053:  MOVWF  25
0054:  RLF    23,F
0055:  RLF    77,F
0056:  MOVF   24,W
0057:  SUBWF  77,W
0058:  BTFSC  03.0
0059:  MOVWF  77
005A:  RLF    78,F
005B:  DECFSZ 25,F
005C:  GOTO   054
005D:  RETURN
.................... 
.................... #list
.................... 
.................... #FUSES NOWDT, PUT, HS, NOPROTECT, NOLVP
.................... #USE DELAY(CLOCK=20M)
*
0004:  MOVLW  25
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #define RS pin_e0
.................... #define RW pin_e1
.................... #define E  pin_e2
.................... #BIT TMR1IF = 0x0C.0
.................... void lcd_command(unsigned int8 cm)
....................    {
....................       output_low(RW);
0018:  BSF    03.5
0019:  BCF    09.1
001A:  BCF    03.5
001B:  BCF    09.1
....................       output_low(RS);
001C:  BSF    03.5
001D:  BCF    09.0
001E:  BCF    03.5
001F:  BCF    09.0
....................       output_d(cm);
0020:  BSF    03.5
0021:  CLRF   08
0022:  BCF    03.5
0023:  MOVF   23,W
0024:  MOVWF  08
....................       output_low(e);
0025:  BSF    03.5
0026:  BCF    09.2
0027:  BCF    03.5
0028:  BCF    09.2
....................       output_high(e);
0029:  BSF    03.5
002A:  BCF    09.2
002B:  BCF    03.5
002C:  BSF    09.2
....................       delay_ms(1);
002D:  MOVLW  01
002E:  MOVWF  25
002F:  CALL   004
0030:  RETURN
....................    }
.................... void lcd_data(unsigned int8 dt)
....................    {
....................       output_low(RW);
*
005E:  BSF    03.5
005F:  BCF    09.1
0060:  BCF    03.5
0061:  BCF    09.1
....................       output_high(RS);
0062:  BSF    03.5
0063:  BCF    09.0
0064:  BCF    03.5
0065:  BSF    09.0
....................       output_d(dt);
0066:  BSF    03.5
0067:  CLRF   08
0068:  BCF    03.5
0069:  MOVF   24,W
006A:  MOVWF  08
....................       output_low(e);
006B:  BSF    03.5
006C:  BCF    09.2
006D:  BCF    03.5
006E:  BCF    09.2
....................       output_high(e);      
006F:  BSF    03.5
0070:  BCF    09.2
0071:  BCF    03.5
0072:  BSF    09.2
....................       delay_ms(1);
0073:  MOVLW  01
0074:  MOVWF  25
0075:  CALL   004
0076:  RETURN
....................    }
.................... void lcd_setup()
....................    {
....................       delay_ms(5);
*
0031:  MOVLW  05
0032:  MOVWF  25
0033:  CALL   004
....................       lcd_command(0x38);
0034:  MOVLW  38
0035:  MOVWF  23
0036:  CALL   018
....................       delay_ms(5);
0037:  MOVLW  05
0038:  MOVWF  25
0039:  CALL   004
....................       lcd_command(0x0C);
003A:  MOVLW  0C
003B:  MOVWF  23
003C:  CALL   018
....................       lcd_command(0x06);
003D:  MOVLW  06
003E:  MOVWF  23
003F:  CALL   018
....................       lcd_command(0x01);
0040:  MOVLW  01
0041:  MOVWF  23
0042:  CALL   018
....................       delay_ms(2);
0043:  MOVLW  02
0044:  MOVWF  25
0045:  CALL   004
0046:  BCF    0A.3
0047:  BCF    0A.4
0048:  GOTO   08D (RETURN)
....................    }
.................... void main()
*
0077:  MOVF   03,W
0078:  ANDLW  1F
0079:  MOVWF  03
007A:  BSF    03.5
007B:  BSF    03.6
007C:  MOVF   09,W
007D:  ANDLW  C0
007E:  MOVWF  09
007F:  BCF    03.6
0080:  BCF    1F.4
0081:  BCF    1F.5
0082:  MOVLW  00
0083:  BSF    03.6
0084:  MOVWF  08
0085:  BCF    03.5
0086:  CLRF   07
0087:  CLRF   08
0088:  CLRF   09
0089:  BCF    03.7
008A:  BCF    03.6
008B:  CLRF   22
.................... {    
....................    char count, sec=0;
....................    lcd_setup();
008C:  GOTO   031
....................    set_tris_d(0);
008D:  MOVLW  00
008E:  BSF    03.5
008F:  MOVWF  08
....................    set_tris_e(0);
0090:  BCF    09.0
0091:  BCF    09.1
0092:  BCF    09.2
0093:  BCF    09.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);
0094:  MOVLW  35
0095:  BCF    03.5
0096:  MOVWF  10
....................    set_timer1(3036);
0097:  CLRF   0E
0098:  MOVLW  0B
0099:  MOVWF  0F
009A:  MOVLW  DC
009B:  MOVWF  0E
009C:  NOP
....................    while (true)
....................       {
....................          for (count=0;count<10;count++)
009D:  CLRF   21
009E:  MOVF   21,W
009F:  SUBLW  09
00A0:  BTFSS  03.0
00A1:  GOTO   0AE
....................             {
....................                while(TMR1IF==0)
00A2:  BTFSC  0C.0
00A3:  GOTO   0AB
....................                   {
....................                      set_timer1(3035);
00A4:  CLRF   0E
00A5:  MOVLW  0B
00A6:  MOVWF  0F
00A7:  MOVLW  DB
00A8:  MOVWF  0E
00A9:  NOP
00AA:  GOTO   0A2
....................                   }
....................                TMR1IF=0;
00AB:  BCF    0C.0
00AC:  INCF   21,F
00AD:  GOTO   09E
....................             }
....................          sec++;
00AE:  INCF   22,F
....................          if (sec==60) sec=0;
00AF:  MOVF   22,W
00B0:  SUBLW  3C
00B1:  BTFSC  03.2
00B2:  CLRF   22
....................          lcd_command(0xc7);
00B3:  MOVLW  C7
00B4:  MOVWF  23
00B5:  CALL   018
....................          lcd_data(sec/10 +0x30);
00B6:  MOVF   22,W
00B7:  MOVWF  23
00B8:  MOVLW  0A
00B9:  MOVWF  24
00BA:  CALL   049
00BB:  MOVLW  30
00BC:  ADDWF  78,W
00BD:  MOVWF  23
00BE:  MOVWF  24
00BF:  CALL   05E
....................          lcd_data(sec%10 +0x30);
00C0:  MOVF   22,W
00C1:  MOVWF  23
00C2:  MOVLW  0A
00C3:  MOVWF  24
00C4:  CALL   049
00C5:  MOVLW  30
00C6:  ADDWF  77,W
00C7:  MOVWF  23
00C8:  MOVWF  24
00C9:  CALL   05E
00CA:  GOTO   09D
....................       }
.................... }
00CB:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
